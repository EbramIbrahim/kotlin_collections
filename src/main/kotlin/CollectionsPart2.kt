
fun main() {


    // Associations
    val cars = listOf("Mercedes", "BMW", "Lexus", "Toyota")

    val types = cars.associate { car ->
        when (car) {
            "Mercedes" -> "G63t" to "Black"
            "BMW" -> "X7" to "Violet"
            "Lexus" -> "ix7" to "White"
            else -> "N/A" to "Unknown"
        }
    }

    println("Associate:$types")

    //→ 𝗮𝘀𝘀𝗼𝗰𝗶𝗮𝘁𝗲𝗕𝘆: Creates a map where the keys are generated by a selector function (I define only the keys)
    val carsCategory = cars.associateBy { car ->
        when (car) {
            "Mercedes" -> "Luxury"
            "BMW" -> "Luxury"
            "Lexus" -> "Luxury"
            "Toyota" -> "Medium class"
            else -> "N/A"
        }
    }
    println("associateBy:$carsCategory")

    val letters = listOf("A", "b", "C", "d", "E")
    val upperAndLower = letters.associateBy { letter ->
        when (letter) {
            "A" -> 1
            "b" -> 0
            "C" -> 1
            "d" -> 0
            "E" -> 1
            else -> -1
        }
    }
    println("associateBy: $upperAndLower")

    //→ 𝗮𝘀𝘀𝗼𝗰𝗶𝗮𝘁𝗲𝗪𝗶𝘁𝗵: Creates a map where the values are generated by a selector function (I define only the values)
    val names = listOf("Ebram", "Tony", "Ibrahim", "jehan", "Mary")
    val nameLengthMap = names.associateWith { it.length }
    println(nameLengthMap)


    // Sorting
    val words = listOf("b", "z", "g", "a", "c", "d").sorted()
    println(words)

    val fruit = listOf(
        Fruits("Apple", 10.0),
        Fruits("Orange", 5.0),
        Fruits("Strawberry", 7.0)
    ).sortedByDescending {
        it.price
    }
    println(fruit)

    val sortedLetters = letters.sortedWith(compareBy {
        when (it) {
            "A" -> 1
            "b" -> 0
            "C" -> 1
            "d" -> 0
            "E" -> 1
            else -> -1
        }
    })

    println("sorted letters: $sortedLetters")

    //𝗱𝗶𝘀𝘁𝗶𝗻𝗰𝘁: Returns a list with only unique items
    val uniqueNames = listOf("Ebram", "Ibrahim", "Aziz", "Ebram", "Ibrahim", "Gerges").distinct()
    println("Unique Names: $uniqueNames")

    //𝗱𝗶𝘀𝘁𝗶𝗻𝗰𝘁𝗕𝘆: Filters out duplicates based on a key selector
    val uniqueFruits = listOf(
        Fruits("Apple", 10.0),
        Fruits("Banana", 12.0),
        Fruits("Orange", 5.5),
        Fruits("Grape", 10.0),
    ).distinctBy { it.price }

    println("Unique fruits: $uniqueFruits")

    val fruits2 = listOf("Apple", "Strawberry", "Orange", "Grape", "Banana", "Dragon fruits")
    val (redFruits, otherFruits) = fruits2.partition {
        it in listOf("Apple", "Strawberry", "Dragon fruits")
    }
    println("redFruits: $redFruits")
    println("otherFruits: $otherFruits")

    println(
        listOf("Coding", "Games").joinTo(
            buffer = java.lang.StringBuilder(),
            prefix = "I like ",
            separator = " and ",
            postfix = "."
        )
    )
    val ds = listOf("Coding", "Games").joinToString(
        prefix = "I like ",
        separator = " and ",
        postfix = "."
    )
    println(ds)


    // <<< 𝗦𝗟𝗜𝗖𝗜𝗡𝗚 >>>

    val numbers = listOf(1, 2, 3, 6, 5, 8, 4, 1, 51, 10, 11)

    println(numbers.take(3))
    println(numbers.takeLast(3))
    // 𝘁𝗮𝗸𝗲𝗪𝗵𝗶𝗹𝗲: Keeps items from the start until the condition is no longer true
    println(numbers.takeWhile { it < 5 })

    println(numbers.drop(3))
    println(numbers.dropLast(3))
    // 𝗱𝗿𝗼𝗽𝗪𝗵𝗶𝗹𝗲: Removes items from the start until the condition is no longer true
    println("dropped While:${numbers.dropWhile { it < 5 }}")

    // <<< 𝗦𝗟𝗜𝗖𝗜𝗡𝗚 >>>

    // <<< 𝗖𝗛𝗨𝗡𝗞𝗜𝗡𝗚 >>>

    // 𝗰𝗵𝘂𝗻𝗸𝗲𝗱: Splits the list into smaller lists of a fixed size
    println("Chunked list: ${numbers.chunked(3)}")

    // 𝘄𝗶𝗻𝗱𝗼𝘄𝗲𝗱: Creates overlapping sub lists (sliding windows) of a fixed size
    println("Windowed list: ${numbers.windowed(2, step = 1)}")

    // getting the average for each 3 numbers
    println(numbers.windowed(3){ it.average() })

    // <<< 𝗖𝗛𝗨𝗡𝗞𝗜𝗡𝗚 >>>

    // <<< 𝗙𝗟𝗔𝗧𝗧𝗘𝗥𝗜𝗡𝗚 >>>

    // 𝗳𝗹𝗮𝘁𝘁𝗲𝗻: Combines multiple lists into a single list
    val list1 = listOf(listOf(23, 25, 44, 57), listOf("Ebram, Tony, Jehan, Ibrahim"))
    println(list1.flatten())
    // <<< 𝗙𝗟𝗔𝗧𝗧𝗘𝗥𝗜𝗡𝗚 >>>


}


data class Fruits(val names: String, val price: Double)









